// MACHINE GENERATED BY 'go generate' COMMAND
// TO EDIT A TYPE OR METHOD, COPY IT TO ANOTHER FILE IN THE PACKAGE
package main

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"io"
)

func writestring(w io.Writer, s string, must int) (err error) {
	data := []byte(s)
	switch l := len(data); {
	case l > must:
		_, err = w.Write(data[:must])
	case l < must:
		_, err = w.Write(data[:l])
		if err != nil {
			return err
		}
		underflow := must - l
		_, err = w.Write(bytes.Repeat([]byte{0x00}, underflow))
	default:
		_, err = w.Write(data[:l])
	}
	return err
}

func ioErr(name, kind string, ac, ex int) error {
	return fmt.Errorf("%s: short %s: %d/%d", name, kind, ac, ex)
}

type Scode int

type exceptioninfo struct {
	ret     uint16
	r1      uint16
	strings []bstr
	context uint32
	r2      uint32
	u1      uint32
	scode   Scode
}

type recinfo struct {
	flag uint32
	n    uint32
	irec int
	data []byte
}

type variant struct {
	n        uint32
	u1       uint32
	kind     uint16
	datatype Typer
}

type safearray struct {
	n      uint16
	flag   uint16
	min    uint32
	nlocks uint32
	ptr    uint32
	nelem  uint32
	min    uint32
	data   Slicer
}

type head struct {
	msft       uint32
	majmin     uint32
	gidat      uint32
	lang       uint64
	flag       uint32
	ver        uint32
	flag2      uint32
	ntype      uint32
	he1        uint32
	he2        uint32
	context    uint32
	nname      uint32
	nnamebyte  uint32
	nameat     uint32
	importat   uint32
	customat   uint32
	r3         uint64
	dispatchat uint32
	nimport    uint32
}

type secthead struct {
	at uint32
	n  uint32
	fu uint32
	u  uint32
}

type sectlist struct {
	s []secthead
}

type arraydesc struct {
	a uint32
	b uint32
	c uint32
}

type typeinfo struct {
	kind    uint32
	at      uint32
	u1      []byte
	nvar    uint16
	nfunc   uint16
	u2      []byte
	gidat   uint32
	group   uint32
	nameat  uint32
	ver     uint32
	he1     uint32
	he2     uint32
	cdat    uint32
	nimport uint16
	nvirt   uint16
	n       uint32
	descat  uint32
	r1      uint32
	pad     uint64
}

type imp struct {
	flag   uint32
	fileat uint32
	gidat  uint16
}

type impfile struct {
	data byte
}

type ref struct {
	kind     uint32
	flag     uint32
	customat uint32
	nextat   uint32
}

type gid struct {
	manure []byte
	kind   uint32
	nextat uint32
}

type gidmap struct {
	a uint32
	b uint32
}

type name struct {
	group  uint32
	nextat uint32
	n      byte
	flag   byte
	hash   uint16
	data   []byte
}

type namemap struct {
	a uint32
	b uint32
	c uint32
}

type bstr struct {
	n    uint16
	data []byte
}

type typedesc struct {
	group uint16
	u1    uint16
	b     uint32
	c     uint32
}

type custom struct {
	a uint32
	b uint32
	c uint32
}

type customGID struct {
	manure []byte
	kind   uint32
	nextat uint32
}

type secTypeinfo struct {
	n    uint32
	list []typeinfo
}

type secImp struct {
	n    uint32
	list []imp
}

type secImpfile struct {
	n    uint32
	list []impfile
}

type secRef struct {
	n    uint32
	list []ref
}

type secGid struct {
	n    uint32
	list []gid
}

type secGidmap struct {
	n    uint32
	list []gidmap
}

type secName struct {
	n    uint32
	list []name
}

type secNamemap struct {
	n    uint32
	list []namemap
}

type secBstring struct {
	n    uint32
	list []bstr
}

type secArraydesc struct {
	n    uint32
	list []arraydesc
}

type secTypedesc struct {
	n    uint32
	list []typedesc
}

type secCustom struct {
	n    uint32
	list []custom
}

type secCustomGID struct {
	n    uint32
	list []customGID
}

type typedata struct {
	n    uint32
	data []byte
}

type funcdesc struct {
	n        uint16
	id       uint16
	t1       uint16
	t2       uint16
	u1       byte
	u2       uint16
	vt1      uint16
	size     uint16
	id2      byte
	numxconv byte
	defxcust byte
	invxkind byte
}

type Func struct {
	info    uint32
	kind    uint32
	flag    uint32
	virtat  uint16
	n       uint16
	flag2   uint32
	nparam  uint16
	nopt    uint16
	he1     uint32
	he2     uint32
	entryat uint32
	he3     uint32
	cdat    uint32
	cdparam uint32
}

type Var struct {
	info     uint32
	kind     uint32
	flag     uint32
	varkind  uint16
	n        uint16
	value    uint32
	he1      uint32
	he2      uint32
	u1       uint32
	customat uint32
	he3      uint32
}

type Param struct {
	kind   uint32
	nameat uint32
	flag   uint32
}

func (z *exceptioninfo) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.ret); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.r1); err != nil {
		return err
	}

	z.strings = make([]bstr, 3)
	for i := 0; i < 3; i++ {

		if err := z.strings[i].ReadBinary(r); err != nil {
			return err
		}
	}

	if err := binary.Read(r, binary.LittleEndian, &z.context); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.r2); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.u1); err != nil {
		return err
	}

	if err := z.scode.ReadBinary(r); err != nil {
		return err
	}

	return nil
}

func (z *exceptioninfo) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.ret); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.r1); err != nil {
		return err
	}

	z.strings = make([]bstr, 3)
	for i := 0; i < 3; i++ {
		if err := z.strings[i].WriteBinary(w); err != nil {
			return err
		}
	}

	if err := binary.Write(w, binary.LittleEndian, z.context); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.r2); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.u1); err != nil {
		return err
	}

	if err := z.scode.WriteBinary(w); err != nil {
		return err
	}

	return nil
}

func (z *recinfo) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.flag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.irec); err != nil {
		return err
	}

	z.data = make([]byte, int(z.n))

	if n, err := r.Read(z.data); err != nil || n != int(z.n) {
		return err
	}

	return nil
}

func (z *recinfo) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.flag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.irec); err != nil {
		return err
	}

	{
		x := int(z.n)
		if n, err := w.Write(z.data[:x]); err != nil || n != x {
			return err
		}
	}
	return nil
}

func (z *variant) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.u1); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.kind); err != nil {
		return err
	}

	z.u1 = make([]byte, 6)

	if n, err := r.Read(z.u1); err != nil || n != 6 {
		return err
	}

	if err := z.datatype.ReadBinary(r); err != nil {
		return err
	}

	return nil
}

func (z *variant) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.u1); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.kind); err != nil {
		return err
	}

	{
		x := 6
		if n, err := w.Write(z.u1[:x]); err != nil || n != x {
			return err
		}
	}

	if err := z.datatype.WriteBinary(w); err != nil {
		return err
	}

	return nil
}

func (z *safearray) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.flag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.min); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.nlocks); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.ptr); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.nelem); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.nelem); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.min); err != nil {
		return err
	}

	if err := z.data.ReadBinary(r); err != nil {
		return err
	}

	return nil
}

func (z *safearray) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.flag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.min); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.nlocks); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.ptr); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.nelem); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.nelem); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.min); err != nil {
		return err
	}

	if err := z.data.WriteBinary(w); err != nil {
		return err
	}

	return nil
}

func (z *head) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.msft); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.majmin); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.gidat); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.lang); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.flag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.ver); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.flag2); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.ntype); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.he1); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.he2); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.context); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.nname); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.nnamebyte); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.nameat); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.importat); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.customat); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.r3); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.dispatchat); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.nimport); err != nil {
		return err
	}

	return nil
}

func (z *head) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.msft); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.majmin); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.gidat); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.lang); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.flag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.ver); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.flag2); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.ntype); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.he1); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.he2); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.context); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.nname); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.nnamebyte); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.nameat); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.importat); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.customat); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.r3); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.dispatchat); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.nimport); err != nil {
		return err
	}

	return nil
}

func (z *secthead) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.at); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.fu); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.u); err != nil {
		return err
	}

	return nil
}

func (z *secthead) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.at); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.fu); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.u); err != nil {
		return err
	}

	return nil
}

func (z *sectlist) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	z.s = make([]secthead, 15)
	for i := 0; i < 15; i++ {

		if err := z.s[i].ReadBinary(r); err != nil {
			return err
		}
	}

	return nil
}

func (z *sectlist) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	z.s = make([]secthead, 15)
	for i := 0; i < 15; i++ {
		if err := z.s[i].WriteBinary(w); err != nil {
			return err
		}
	}

	return nil
}

func (z *arraydesc) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.a); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.b); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.c); err != nil {
		return err
	}

	return nil
}

func (z *arraydesc) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.a); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.b); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.c); err != nil {
		return err
	}

	return nil
}

func (z *typeinfo) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.kind); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.at); err != nil {
		return err
	}

	z.u1 = make([]byte, 16)

	if n, err := r.Read(z.u1); err != nil || n != 16 {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.nvar); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.nfunc); err != nil {
		return err
	}

	z.u2 = make([]byte, 20)

	if n, err := r.Read(z.u2); err != nil || n != 20 {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.gidat); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.group); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.nameat); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.ver); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.he1); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.he2); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.cdat); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.nimport); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.nvirt); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.descat); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.r1); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.pad); err != nil {
		return err
	}

	return nil
}

func (z *typeinfo) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.kind); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.at); err != nil {
		return err
	}

	{
		x := 16
		if n, err := w.Write(z.u1[:x]); err != nil || n != x {
			return err
		}
	}

	if err := binary.Write(w, binary.LittleEndian, z.nvar); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.nfunc); err != nil {
		return err
	}

	{
		x := 20
		if n, err := w.Write(z.u2[:x]); err != nil || n != x {
			return err
		}
	}

	if err := binary.Write(w, binary.LittleEndian, z.gidat); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.group); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.nameat); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.ver); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.he1); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.he2); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.cdat); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.nimport); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.nvirt); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.descat); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.r1); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.pad); err != nil {
		return err
	}

	return nil
}

func (z *imp) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.flag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.fileat); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.gidat); err != nil {
		return err
	}

	return nil
}

func (z *imp) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.flag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.fileat); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.gidat); err != nil {
		return err
	}

	return nil
}

func (z *impfile) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.data); err != nil {
		return err
	}

	return nil
}

func (z *impfile) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.data); err != nil {
		return err
	}

	return nil
}

func (z *ref) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.kind); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.flag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.customat); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.nextat); err != nil {
		return err
	}

	return nil
}

func (z *ref) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.kind); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.flag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.customat); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.nextat); err != nil {
		return err
	}

	return nil
}

func (z *gid) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	z.manure = make([]byte, 16)

	if n, err := r.Read(z.manure); err != nil || n != 16 {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.kind); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.nextat); err != nil {
		return err
	}

	return nil
}

func (z *gid) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	{
		x := 16
		if n, err := w.Write(z.manure[:x]); err != nil || n != x {
			return err
		}
	}

	if err := binary.Write(w, binary.LittleEndian, z.kind); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.nextat); err != nil {
		return err
	}

	return nil
}

func (z *gidmap) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.a); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.b); err != nil {
		return err
	}

	return nil
}

func (z *gidmap) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.a); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.b); err != nil {
		return err
	}

	return nil
}


func (z *namemap) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.a); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.b); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.c); err != nil {
		return err
	}

	return nil
}

func (z *namemap) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.a); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.b); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.c); err != nil {
		return err
	}

	return nil
}


func (z *bstr) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	{
		x := int(z.n)
		if n, err := w.Write(z.data[:x]); err != nil || n != x {
			return err
		}
	}
	return nil
}

func (z *typedesc) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.group); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.u1); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.b); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.c); err != nil {
		return err
	}

	return nil
}

func (z *typedesc) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.group); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.u1); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.b); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.c); err != nil {
		return err
	}

	return nil
}

func (z *custom) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.a); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.b); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.c); err != nil {
		return err
	}

	return nil
}

func (z *custom) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.a); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.b); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.c); err != nil {
		return err
	}

	return nil
}

func (z *customGID) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	z.manure = make([]byte, 16)

	if n, err := r.Read(z.manure); err != nil || n != 16 {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.kind); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.nextat); err != nil {
		return err
	}

	return nil
}

func (z *customGID) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	{
		x := 16
		if n, err := w.Write(z.manure[:x]); err != nil || n != x {
			return err
		}
	}

	if err := binary.Write(w, binary.LittleEndian, z.kind); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.nextat); err != nil {
		return err
	}

	return nil
}

func (z *secTypeinfo) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	z.list = make([]typeinfo, int(z.n))
	for i := 0; i < int(z.n); i++ {

		if err := z.list[i].ReadBinary(r); err != nil {
			return err
		}
	}

	return nil
}

func (z *secTypeinfo) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	z.list = make([]typeinfo, int(z.n))
	for i := 0; i < int(z.n); i++ {
		if err := z.list[i].WriteBinary(w); err != nil {
			return err
		}
	}

	return nil
}

func (z *secImp) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	z.list = make([]imp, int(z.n))
	for i := 0; i < int(z.n); i++ {

		if err := z.list[i].ReadBinary(r); err != nil {
			return err
		}
	}

	return nil
}

func (z *secImp) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	z.list = make([]imp, int(z.n))
	for i := 0; i < int(z.n); i++ {
		if err := z.list[i].WriteBinary(w); err != nil {
			return err
		}
	}

	return nil
}

func (z *secImpfile) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	z.list = make([]impfile, int(z.n))
	for i := 0; i < int(z.n); i++ {

		if err := z.list[i].ReadBinary(r); err != nil {
			return err
		}
	}

	return nil
}

func (z *secImpfile) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	z.list = make([]impfile, int(z.n))
	for i := 0; i < int(z.n); i++ {
		if err := z.list[i].WriteBinary(w); err != nil {
			return err
		}
	}

	return nil
}

func (z *secRef) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	z.list = make([]ref, int(z.n))
	for i := 0; i < int(z.n); i++ {

		if err := z.list[i].ReadBinary(r); err != nil {
			return err
		}
	}

	return nil
}

func (z *secRef) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	z.list = make([]ref, int(z.n))
	for i := 0; i < int(z.n); i++ {
		if err := z.list[i].WriteBinary(w); err != nil {
			return err
		}
	}

	return nil
}

func (z *secGid) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	z.list = make([]gid, int(z.n))
	for i := 0; i < int(z.n); i++ {

		if err := z.list[i].ReadBinary(r); err != nil {
			return err
		}
	}

	return nil
}

func (z *secGid) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	z.list = make([]gid, int(z.n))
	for i := 0; i < int(z.n); i++ {
		if err := z.list[i].WriteBinary(w); err != nil {
			return err
		}
	}

	return nil
}

func (z *secGidmap) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	z.list = make([]gidmap, int(z.n))
	for i := 0; i < int(z.n); i++ {

		if err := z.list[i].ReadBinary(r); err != nil {
			return err
		}
	}

	return nil
}

func (z *secGidmap) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	z.list = make([]gidmap, int(z.n))
	for i := 0; i < int(z.n); i++ {
		if err := z.list[i].WriteBinary(w); err != nil {
			return err
		}
	}

	return nil
}

func (z *secName) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	z.list = make([]name, int(z.n))
	for i := 0; i < int(z.n); i++ {

		if err := z.list[i].ReadBinary(r); err != nil {
			return err
		}
	}

	return nil
}

func (z *secName) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	z.list = make([]name, int(z.n))
	for i := 0; i < int(z.n); i++ {
		if err := z.list[i].WriteBinary(w); err != nil {
			return err
		}
	}

	return nil
}

func (z *secNamemap) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	z.list = make([]namemap, int(z.n))
	for i := 0; i < int(z.n); i++ {

		if err := z.list[i].ReadBinary(r); err != nil {
			return err
		}
	}

	return nil
}

func (z *secNamemap) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	z.list = make([]namemap, int(z.n))
	for i := 0; i < int(z.n); i++ {
		if err := z.list[i].WriteBinary(w); err != nil {
			return err
		}
	}

	return nil
}

func (z *secBstring) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	z.list = make([]bstr, int(z.n))
	for i := 0; i < int(z.n); i++ {

		if err := z.list[i].ReadBinary(r); err != nil {
			return err
		}
	}

	return nil
}

func (z *secBstring) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	z.list = make([]bstr, int(z.n))
	for i := 0; i < int(z.n); i++ {
		if err := z.list[i].WriteBinary(w); err != nil {
			return err
		}
	}

	return nil
}

func (z *secArraydesc) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	z.list = make([]arraydesc, int(z.n))
	for i := 0; i < int(z.n); i++ {

		if err := z.list[i].ReadBinary(r); err != nil {
			return err
		}
	}

	return nil
}

func (z *secArraydesc) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	z.list = make([]arraydesc, int(z.n))
	for i := 0; i < int(z.n); i++ {
		if err := z.list[i].WriteBinary(w); err != nil {
			return err
		}
	}

	return nil
}

func (z *secTypedesc) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	z.list = make([]typedesc, int(z.n))
	for i := 0; i < int(z.n); i++ {

		if err := z.list[i].ReadBinary(r); err != nil {
			return err
		}
	}

	return nil
}

func (z *secTypedesc) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	z.list = make([]typedesc, int(z.n))
	for i := 0; i < int(z.n); i++ {
		if err := z.list[i].WriteBinary(w); err != nil {
			return err
		}
	}

	return nil
}

func (z *secCustom) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	z.list = make([]custom, int(z.n))
	for i := 0; i < int(z.n); i++ {

		if err := z.list[i].ReadBinary(r); err != nil {
			return err
		}
	}

	return nil
}

func (z *secCustom) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	z.list = make([]custom, int(z.n))
	for i := 0; i < int(z.n); i++ {
		if err := z.list[i].WriteBinary(w); err != nil {
			return err
		}
	}

	return nil
}

func (z *secCustomGID) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	z.list = make([]customGID, int(z.n))
	for i := 0; i < int(z.n); i++ {

		if err := z.list[i].ReadBinary(r); err != nil {
			return err
		}
	}

	return nil
}

func (z *secCustomGID) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	z.list = make([]customGID, int(z.n))
	for i := 0; i < int(z.n); i++ {
		if err := z.list[i].WriteBinary(w); err != nil {
			return err
		}
	}

	return nil
}

func (z *typedata) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	z.data = make([]byte, int(z.n)-1)

	if n, err := r.Read(z.data); err != nil || n != int(z.n)-1 {
		return err
	}

	return nil
}

func (z *typedata) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	{
		x := int(z.n) - 1
		if n, err := w.Write(z.data[:x]); err != nil || n != x {
			return err
		}
	}
	return nil
}

func (z *funcdesc) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.id); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.t1); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.t2); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.u1); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.u2); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.vt1); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.size); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.id2); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.numxconv); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.defxcust); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.invxkind); err != nil {
		return err
	}

	return nil
}

func (z *funcdesc) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.id); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.t1); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.t2); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.u1); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.u2); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.vt1); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.size); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.id2); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.numxconv); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.defxcust); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.invxkind); err != nil {
		return err
	}

	return nil
}

func (z *Func) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.info); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.kind); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.flag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.virtat); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.flag2); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.nparam); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.nopt); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.he1); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.he2); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.entryat); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.he3); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.cdat); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.cdparam); err != nil {
		return err
	}

	return nil
}

func (z *Func) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.info); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.kind); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.flag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.virtat); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.flag2); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.nparam); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.nopt); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.he1); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.he2); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.entryat); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.he3); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.cdat); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.cdparam); err != nil {
		return err
	}

	return nil
}

func (z *Var) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.info); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.kind); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.flag); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.varkind); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.n); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.value); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.he1); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.he2); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.u1); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.customat); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.he3); err != nil {
		return err
	}

	return nil
}

func (z *Var) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.info); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.kind); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.flag); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.varkind); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.n); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.value); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.he1); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.he2); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.u1); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.customat); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.he3); err != nil {
		return err
	}

	return nil
}

func (z *Param) ReadBinary(r io.Reader) (err error) {
	defer func() { recover() }()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.kind); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.nameat); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.flag); err != nil {
		return err
	}

	return nil
}

func (z *Param) WriteBinary(w io.Writer) (err error) {
	defer func() { recover() }()

	if err := binary.Write(w, binary.LittleEndian, z.kind); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.nameat); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.flag); err != nil {
		return err
	}

	return nil
}
